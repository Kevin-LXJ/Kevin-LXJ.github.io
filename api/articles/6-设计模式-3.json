{"title":"设计模式-3","uid":"1282d363af11675dd608d5f2af6828ad","slug":"6-设计模式-3","date":"2023-05-08T15:06:41.000Z","updated":"2023-05-09T15:31:37.835Z","comments":true,"path":"api/articles/6-设计模式-3.json","keywords":null,"cover":[],"content":"<h1 id=\"设计模式-3\"><a class=\"markdownIt-Anchor\" href=\"#设计模式-3\"></a> 设计模式-3</h1>\n<h2 id=\"一-行为型模式\"><a class=\"markdownIt-Anchor\" href=\"#一-行为型模式\"></a> 一、 行为型模式</h2>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>行为型模式关注的是<strong>各个类之间的相互作用</strong>，将职责划分清楚，使代码更加地清晰。描述程序在运行时复杂的流程控制，即描述<strong>多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务</strong>，它涉及算法与对象间职责的分配。<br />\n行为型模式分为<strong>类行为模式</strong>和<strong>对象行为模式</strong>，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以<strong>对象行为模式比类行为模式具有更大的灵活性</strong>。</p>\n<ul>\n<li><strong>模板方法（Template Method）模式</strong>：定义一个操作中的算法骨架，将算法的一些步骤延迟到子类中，使得子类在可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li>\n<li><strong>策略（Strategy）模式</strong>：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li>\n<li><strong>命令（Command）模式</strong>：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li>\n<li>**职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li>\n<li><strong>状态（State）模式</strong>：允许一个对象在其内部状态发生改变时改变其行为能力。</li>\n<li><strong>观察者（Observer）模式</strong>：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li>\n<li><strong>中介者（Mediator）模式</strong>：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li>\n<li><strong>迭代器（Iterator）模式</strong>：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li>\n<li><strong>访问者（Visitor）模式</strong>：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li>\n<li><strong>备忘录（Memento）模式</strong>：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li>\n<li><strong>解释器（Interpreter）模式</strong>：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li>\n<li><strong>责任链模式</strong>：</li>\n</ul></blockquote>\n<h3 id=\"一策略模式\"><a class=\"markdownIt-Anchor\" href=\"#一策略模式\"></a> （一）策略模式</h3>\n<h4 id=\"模式介绍\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：\n<ul>\n<li>在现实生活中常常遇到实现某种目标存在多种策略可供选择的情况，例如，出行旅游可以乘坐飞机、乘坐火车、骑自行车或自己开私家车等，超市促销可以釆用打折、送商品、送积分等方法。</li>\n<li>在软件开发中也常常遇到类似的情况，当实现某一个功能存在多种算法或者策略，我们可以根据环境或者条件的不同选择不同的算法或者策略来完成该功能，如数据排序策略有冒泡排序、选择排序、插入排序、二叉树排序等。</li>\n<li>如果使用多重条件转移语句实现（即硬编码），不但使条件语句变得很复杂，而且增加、删除或更换算法要修改原代码，不易维护，违背开闭原则。如果采用策略模式就能很好解决该问题。</li>\n</ul>\n</li>\n<li>模式定义：\n<ul>\n<li>定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法独立于使用它的客户而变化</li>\n<li>策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</li>\n</ul>\n</li>\n<li>模式结构：\n<ul>\n<li><img src=\"../img/6/1-1.png\" alt=\"策略模式结构图\" /></li>\n</ul>\n</li>\n<li>角色分析：\n<ul>\n<li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>\n<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li>\n<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>\n</ul>\n</li>\n<li>模型评价：\n<ul>\n<li>优点\n<ul>\n<li>策略模式提供了对“开闭原则”的完美支持。</li>\n<li>策略模式提供了管理相关的算法族的办法。</li>\n<li>使用策略模式可以避免使用多重条件转移语句。</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类</li>\n<li>策略模式将造成产生很多策略类和对象，可以通过享元模式在一定程度上减少对象的数量。</li>\n</ul>\n</li>\n<li>应用场景\n<ul>\n<li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li>\n<li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。</li>\n<li>系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。</li>\n<li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。</li>\n<li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li>\n</ul>\n</li>\n<li>改进\n<ul>\n<li>在一个使用策略模式的系统中，当存在的策略很多时，客户端管理所有策略算法将变得很复杂，如果在环境类中使用策略工厂模式来管理这些策略类将大大减少客户端的工作复杂度</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现\"><a class=\"markdownIt-Anchor\" href=\"#模式实现\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;具体例子\n&#x2F;&#x2F;软件公司为某电影院开发了一套影院售票系统，在该系统中需要为不同类型的用户提供不同的电影票打折方式，具体打折方案如下：\n&#x2F;&#x2F;(1) 学生凭学生证可享受票价8折优惠；\n&#x2F;&#x2F;(2) 年龄在10周岁及以下的儿童可享受每张票减免10元的优惠；\n&#x2F;&#x2F;(3) 影院VIP用户除享受票价半价优惠外还可进行积分\n&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F;抽象策略类\npublic interface Discount&#123;\n\tpublic double calculate(double price);\n&#125;\n&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F;具体策略类\n&#x2F;&#x2F;学生优惠\npublic class StudentDiscount implements Discount&#123;\n    @Override\n    public double calculate(double price)&#123;\n\t\tSystem.out.println(&quot;学生票：&quot;);\n\t\treturn price*0.8;\n\t&#125;\n&#125; \n\n\n&#x2F;&#x2F;儿童优惠\npublic class ChildDiscount implements Discount&#123;\n    @Override\n    public double calculate(double price)&#123;\n\t\tSystem.out.println(&quot;儿童票：&quot;);\n\t\treturn price-10;\n\t&#125;\n&#125; \n\n&#x2F;&#x2F;VIP优惠\npublic class VIPDiscount implements Discount&#123;\n    @Override\n    public double calculate(double price)&#123;\n\t\tSystem.out.println(&quot;VIP票：&quot;);\n\t\tSystem.out.println(&quot;增加积分！&quot;);\n\t\treturn price*0.5;\n\t&#125;\n&#125; \n&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F;环境类\npublic class MovieTicket &#123;\n\tprivate double price;\n\tprivate Discount discount;\n\tpublic void setPrice(double price)&#123;\n\t\tthis.price &#x3D; price;\n\t&#125;\n\tpublic void setDiscount(Discount d)&#123;\n\t\tthis.discount &#x3D; d;\n\t&#125;\n\tpublic double getPrice()&#123;\n\t\treturn discount.calculate(price);\n\t&#125;\n&#125;\n&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F;工具类XMLUtil\nimport javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport org.xml.sax.SAXException;\nimport java.io.*;\npublic class XMLUtil\n&#123;\n    &#x2F;&#x2F;该方法用于从XML配置文件中提取对应对象，并返回对象\n\tpublic static String getBean()\n\t&#123;\n\t\ttry\n\t\t&#123;\n\t\t\t&#x2F;&#x2F;创建文档对象\n\t\t\tDocumentBuilderFactory dFactory &#x3D; DocumentBuilderFactory.newInstance();\n\t\t\tDocumentBuilder builder &#x3D; dFactory.newDocumentBuilder();\n\t\t\tDocument doc;\t\t\t\t\t\t\t\n\t\t\tdoc &#x3D; builder.parse(new File(&quot;config.xml&quot;)); \n\t\t\n\t\t\t&#x2F;&#x2F;获取包含类名的文本节点\n\t\t\tNodeList nl &#x3D; doc.getElementsByTagName(&quot;name&quot;);\n            Node classNode &#x3D; nl.item(0).getFirstChild();\n            String name &#x3D; classNode.getNodeValue().trim();\n            \n            return name;\n           &#125;   \n           \tcatch(Exception e)\n           \t&#123;\n           \t\te.printStackTrace();\n           \t\treturn null;\n           \t&#125;\n\t\t&#125;\n&#125;\n&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F;配置文件\n&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;\n&lt;config&gt;\n\t&lt;name&gt;VIPDiscount&lt;&#x2F;name&gt;\n&lt;&#x2F;config&gt;\n&#x2F;&#x2F;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&#x2F;&#x2F;客户端\npublic class Client &#123;\n\tpublic static void main(String[] args) &#123;\n\t\tMovieTicket mt;\n\t\tDiscount discount;\n\t\tdiscount &#x3D; (Discount)XMLUtil.getBean();&#x2F;&#x2F;相当于获取特定的对象，如VIPDdiscount类\n\t\tmt &#x3D; new MovieTicket(discount);\n\t\tmt.setPrice(100);\n\t\tSystem.out.println(&quot;优惠后的价格：&quot;+mt.getPrice());\n\t&#125;\n&#125;</code></pre>\n<hr />\n<h3 id=\"二模板方法模式\"><a class=\"markdownIt-Anchor\" href=\"#二模板方法模式\"></a> （二）模板方法模式</h3>\n<h4 id=\"模式介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-2\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-2\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-2\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"三备忘录模式\"><a class=\"markdownIt-Anchor\" href=\"#三备忘录模式\"></a> （三）备忘录模式</h3>\n<h4 id=\"模式介绍-3\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-3\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-3\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-3\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"四观察者模式\"><a class=\"markdownIt-Anchor\" href=\"#四观察者模式\"></a> （四）观察者模式</h3>\n<h4 id=\"模式介绍-4\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-4\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：\n<ul>\n<li>在某些场景中，需要建立一种对象与对象之间的依赖关系，一个对象发生改变时将自动通知其他对象，其他对象将相应做出反应。在此，发生改变的对象称为观察目标，而被通知的对象称为观察者，一个观察目标可以对应多个观察者，而且这些观察者之间没有相互联系，可以根据需要增加和删除观察者，使得系统更易于扩展，这就是观察者模式的模式动机。</li>\n</ul>\n</li>\n<li>模式定义：<br />\n-定义对象间的一种一对多依赖关系，使得每当一个对象状态发生改变时，其相关依赖对象皆得到通知并被自动更新。\n<ul>\n<li>观察者模式又叫做发布-订阅（Publish/Subscribe）模式、模型-视图（Model/View）模式、源-监听器（Source/Listener）模式或从属者（Dependents）模式。观察者模式是一种对象行为型模式。</li>\n</ul>\n</li>\n<li>模式结构：\n<ul>\n<li><img src=\"../img/6/2-1.png\" alt=\"观察者模式结构图\" /></li>\n</ul>\n</li>\n<li>角色分析：\n<ul>\n<li>抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</li>\n<li>具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>\n<li>抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>\n<li>具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>\n</ul>\n</li>\n<li>模型评价：\n<ul>\n<li>优点\n<ul>\n<li>观察者模式可以实现表示层和数据逻辑层的分离，并定义了稳定的消息更新传递机制，抽象了更新接口，使得可以有各种各样不同的表示层作为具体观察者角色。</li>\n<li>观察者模式在观察目标和观察者之间建立一个抽象的耦合，这样设计在增加观察者或被观察者的时候，都非常容易扩展，不修改原有代码只需要增加具体实现就可以进行扩展，符合“开闭原则”。</li>\n<li>建立一套触发机制，观察者模式可以更方便地实现具体业务中的复杂逻辑关系，形成逻辑链条。</li>\n<li>观察者模式支持广播通信。</li>\n</ul>\n</li>\n<li>缺点\n<ul>\n<li>如果一个观察目标对象有很多直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。</li>\n<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。</li>\n<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>\n</ul>\n</li>\n<li>应用场景\n<ul>\n<li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li>\n<li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时，可将这二者封装在独立的对象中以使它们可以各自独立地改变和复用。</li>\n<li>实现类似广播机制的功能，不需要知道具体收听者，只需分发广播，系统中感兴趣的对象会自动接收该广播。</li>\n<li>多层级嵌套使用，形成一种链式触发机制，使得事件具备跨域（跨越两种观察者类型）通知。</li>\n</ul>\n</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-4\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-4\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;抽象目标\nabstract class Subject &#123;\n    protected List&lt;Observer&gt; observers &#x3D; new ArrayList&lt;Observer&gt;();\n    &#x2F;&#x2F;增加观察者方法\n    public void add(Observer observer) &#123;\n        observers.add(observer);\n    &#125;\n    &#x2F;&#x2F;删除观察者方法\n    public void remove(Observer observer) &#123;\n        observers.remove(observer);\n    &#125;\n    public abstract void notifyObserver(); &#x2F;&#x2F;通知观察者方法\n&#125;\n&#x2F;&#x2F;具体目标\nclass ConcreteSubject extends Subject &#123;\n    public void notifyObserver() &#123;\n        System.out.println(&quot;具体目标发生改变...&quot;);\n        System.out.println(&quot;--------------&quot;);\n        for (Object obs : observers) &#123;\n            ((Observer) obs).response();\n        &#125;\n    &#125;\n&#125;\n&#x2F;&#x2F;抽象观察者\ninterface Observer &#123;\n    void response(); &#x2F;&#x2F;反应\n&#125;\n&#x2F;&#x2F;具体观察者1\nclass ConcreteObserver1 implements Observer &#123;\n    public void response() &#123;\n        System.out.println(&quot;具体观察者1作出反应！&quot;);\n    &#125;\n&#125;\n&#x2F;&#x2F;具体观察者1\nclass ConcreteObserver2 implements Observer &#123;\n    public void response() &#123;\n        System.out.println(&quot;具体观察者2作出反应！&quot;);\n    &#125;\n&#125;\n&#x2F;&#x2F;客户端\nimport java.util.*;\npublic class ObserverPattern &#123;\n    public static void main(String[] args) &#123;\n        Subject subject &#x3D; new ConcreteSubject();\n        Observer obs1 &#x3D; new ConcreteObserver1();\n        Observer obs2 &#x3D; new ConcreteObserver2();\n        subject.add(obs1);\n        subject.add(obs2);\n        subject.notifyObserver();\n    &#125;\n&#125;\n&#x2F;&#x2F;运行结果\n具体目标发生改变...\n--------------\n具体观察者1作出反应！\n具体观察者2作出反应！</code></pre>\n<hr />\n<h3 id=\"五迭代器模式\"><a class=\"markdownIt-Anchor\" href=\"#五迭代器模式\"></a> （五）迭代器模式</h3>\n<h4 id=\"模式介绍-5\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-5\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-5\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-5\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"六命令模式\"><a class=\"markdownIt-Anchor\" href=\"#六命令模式\"></a> （六）命令模式</h3>\n<h4 id=\"模式介绍-6\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-6\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-6\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-6\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"七状态模式\"><a class=\"markdownIt-Anchor\" href=\"#七状态模式\"></a> （七）状态模式</h3>\n<h4 id=\"模式介绍-7\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-7\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-7\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-7\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"八职责链模式\"><a class=\"markdownIt-Anchor\" href=\"#八职责链模式\"></a> （八）职责链模式</h3>\n<h4 id=\"模式介绍-8\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-8\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-8\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-8\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"九中介者模式\"><a class=\"markdownIt-Anchor\" href=\"#九中介者模式\"></a> （九）中介者模式</h3>\n<h4 id=\"模式介绍-9\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-9\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-9\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-9\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"十访问者模式\"><a class=\"markdownIt-Anchor\" href=\"#十访问者模式\"></a> （十）访问者模式</h3>\n<h4 id=\"模式介绍-10\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-10\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-10\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-10\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h3 id=\"十一解释器模式\"><a class=\"markdownIt-Anchor\" href=\"#十一解释器模式\"></a> （十一）解释器模式</h3>\n<h4 id=\"模式介绍-11\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-11\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-11\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-11\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#x2F;&#x2F;</code></pre>\n<hr />\n<h1 id=\"参考文献博客\"><a class=\"markdownIt-Anchor\" href=\"#参考文献博客\"></a> 参考文献/博客</h1>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>[1] <a href=\"https://www.runoob.com/design-pattern/design-pattern-tutorial.html\">设计模式</a><br />\n[2] <a href=\"https://segmentfault.com/a/1190000043340405\">15分钟入门23种设计模式：图解，范例和对比</a><br />\n[3] <a href=\"https://blog.csdn.net/penriver/article/details/118571991\">万字详解 GoF 23 种设计模式（多图、思维导图、模式对比），让你一文全面理解</a><br />\n[4] <a href=\"https://blog.csdn.net/weixin_43905387?type=blog\">一孔之见️</a><br />\n[5] <a href=\"https://www.jianshu.com/nb/26354260\">Jerry_1116</a><br />\n[6] <a href=\"https://www.zhihu.com/column/c_1449803713698856960\">Java技术教程</a></p></blockquote>\n","feature":true,"text":" 设计模式-3 一、 行为型模式 行为型模式关注的是各个类之间的相互作用，将职责划分清楚，使代码更加地清晰。描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。 行为型模式分为类行为模式和对象行为模...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-3\"><span class=\"toc-text\"> 设计模式-3</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E8%A1%8C%E4%B8%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 一、 行为型模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （一）策略模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （二）模板方法模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-2\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （三）备忘录模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-3\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-3\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （四）观察者模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-4\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-4\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （五）迭代器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-5\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-5\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AD%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （六）命令模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-6\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-6\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%83%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （七）状态模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-7\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-7\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%AB%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （八）职责链模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-8\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-8\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B9%9D%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （九）中介者模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-9\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-9\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%81%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （十）访问者模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-10\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-10\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8D%81%E4%B8%80%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （十一）解释器模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-11\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-11\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%8F%82%E8%80%83%E6%96%87%E7%8C%AE%E5%8D%9A%E5%AE%A2\"><span class=\"toc-text\"> 参考文献&#x2F;博客</span></a></li></ol>","author":{"name":"Kevin","slug":"blog-author","avatar":"/img/avatar/OIP-C.jpg","link":"/","description":"我真的是ikun","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"设计模式-2","uid":"a39375e630b00cc66be242014aeafe21","slug":"5-设计模式-2","date":"2023-05-08T14:06:39.000Z","updated":"2023-05-09T13:44:44.248Z","comments":true,"path":"api/articles/5-设计模式-2.json","keywords":null,"cover":[],"text":" 设计模式-2 一、 结构型模式 结构型模式关注的是类或对象如何组织,描述如何将类或对象按某种布局组成更大的结构。 它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问...","link":"","photos":[],"count_time":{"symbolsCount":"51k","symbolsTime":"46 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/tags/设计模式.json"}],"author":{"name":"Kevin","slug":"blog-author","avatar":"/img/avatar/OIP-C.jpg","link":"/","description":"我真的是ikun","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}