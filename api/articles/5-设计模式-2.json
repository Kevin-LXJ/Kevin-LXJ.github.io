{"title":"设计模式-2","uid":"a39375e630b00cc66be242014aeafe21","slug":"5-设计模式-2","date":"2023-05-08T14:06:39.000Z","updated":"2023-05-08T15:16:16.062Z","comments":true,"path":"api/articles/5-设计模式-2.json","keywords":null,"cover":null,"content":"<h1 id=\"设计模式-2\"><a class=\"markdownIt-Anchor\" href=\"#设计模式-2\"></a> 设计模式-2</h1>\n<h2 id=\"一-结构型模式\"><a class=\"markdownIt-Anchor\" href=\"#一-结构型模式\"></a> 一、 结构型模式</h2>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>结构型模式关注的是<strong>类或对象如何组织</strong>,描述<strong>如何将类或对象按某种布局组成更大的结构</strong>。  它分为<strong>类结构型模式</strong>和<strong>对象结构型模式</strong>，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。</p>\n<ul>\n<li><strong>代理（Proxy）模式</strong>：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li>\n<li><strong>适配器（Adapter）模式</strong>：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li>\n<li><strong>桥接（Bridge）模式</strong>：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现的，从而降低了抽象和实现这两个可变维度的耦合度。</li>\n<li><strong>装饰（Decorator）模式</strong>：动态地给对象增加一些职责，即增加其额外的功能。</li>\n<li><strong>外观（Facade）模式</strong>：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li>\n<li><strong>享元（Flyweight）模式</strong>：运用共享技术来有效地支持大量细粒度对象的复用。</li>\n<li><strong>组合（Composite）模式</strong>：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li>\n</ul></blockquote>\n<h3 id=\"一外观模式\"><a class=\"markdownIt-Anchor\" href=\"#一外观模式\"></a> （一）外观模式</h3>\n<h4 id=\"模式介绍\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现\"><a class=\"markdownIt-Anchor\" href=\"#模式实现\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#96;&#96;&#96;\n### （二）适配器模式\n#### 模式介绍\n1. 模式动机：\n2. 模式定义：\n3. 模式结构：\n4. 角色分析：\n5. 模型评价：\n    - 优点\n    - 缺点\n    - 应用场景\n    - 改进\n#### 模式实现\n- java实现\n&#96;&#96;&#96;java </code></pre>\n<h3 id=\"三组合模式\"><a class=\"markdownIt-Anchor\" href=\"#三组合模式\"></a> （三）组合模式</h3>\n<h4 id=\"模式介绍-2\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-2\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-2\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-2\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#96;&#96;&#96;\n### （四）代理模式\n#### 模式介绍\n1. 模式动机：\n2. 模式定义：\n3. 模式结构：\n4. 角色分析：\n5. 模型评价：\n    - 优点\n    - 缺点\n    - 应用场景\n    - 改进\n#### 模式实现\n- java实现\n&#96;&#96;&#96;java </code></pre>\n<h3 id=\"五桥接模式\"><a class=\"markdownIt-Anchor\" href=\"#五桥接模式\"></a> （五）桥接模式</h3>\n<h4 id=\"模式介绍-3\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-3\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-3\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-3\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\">&#96;&#96;&#96;\n### （六）装饰模式\n#### 模式介绍\n1. 模式动机：\n2. 模式定义：\n3. 模式结构：\n4. 角色分析：\n5. 模型评价：\n    - 优点\n    - 缺点\n    - 应用场景\n    - 改进\n#### 模式实现\n- java实现\n&#96;&#96;&#96;java </code></pre>\n<h3 id=\"七享元模式\"><a class=\"markdownIt-Anchor\" href=\"#七享元模式\"></a> （七）享元模式</h3>\n<h4 id=\"模式介绍-4\"><a class=\"markdownIt-Anchor\" href=\"#模式介绍-4\"></a> 模式介绍</h4>\n<ol>\n<li>模式动机：</li>\n<li>模式定义：</li>\n<li>模式结构：</li>\n<li>角色分析：</li>\n<li>模型评价：\n<ul>\n<li>优点</li>\n<li>缺点</li>\n<li>应用场景</li>\n<li>改进</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"模式实现-4\"><a class=\"markdownIt-Anchor\" href=\"#模式实现-4\"></a> 模式实现</h4>\n<ul>\n<li>java实现</li>\n</ul>\n<h2 id=\"-code3-\"><a class=\"markdownIt-Anchor\" href=\"#-code3-\"></a> <pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"></code></pre></h2>\n","feature":true,"text":" 设计模式-2 一、 结构型模式 结构型模式关注的是类或对象如何组织,描述如何将类或对象按某种布局组成更大的结构。 它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。 代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/tags/设计模式.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-2\"><span class=\"toc-text\"> 设计模式-2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80-%E7%BB%93%E6%9E%84%E5%9E%8B%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> 一、 结构型模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （一）外观模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （三）组合模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-2\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%94%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （五）桥接模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-3\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-3\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%83%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F\"><span class=\"toc-text\"> （七）享元模式</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E4%BB%8B%E7%BB%8D-4\"><span class=\"toc-text\"> 模式介绍</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%A8%A1%E5%BC%8F%E5%AE%9E%E7%8E%B0-4\"><span class=\"toc-text\"> 模式实现</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#-code3-\"><span class=\"toc-text\"> </span></a></li></ol></li></ol>","author":{"name":"Kevin","slug":"blog-author","avatar":"/img/avatar/OIP-C.jpg","link":"/","description":"我真的是ikun","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"设计模式-3","uid":"1282d363af11675dd608d5f2af6828ad","slug":"6-设计模式-3","date":"2023-05-08T15:06:41.000Z","updated":"2023-05-08T15:19:26.630Z","comments":true,"path":"api/articles/6-设计模式-3.json","keywords":null,"cover":null,"text":" 设计模式-3 一、 行为型模式 行为型模式关注的是各个类之间的相互作用，将职责划分清楚，使代码更加地清晰。描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。 行为型模式分为类行为模式和对象行为模...","link":"","photos":[],"count_time":{"symbolsCount":"2.2k","symbolsTime":"2 mins."},"categories":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/categories/设计模式.json"}],"tags":[{"name":"设计模式","slug":"设计模式","count":3,"path":"api/tags/设计模式.json"}],"author":{"name":"Kevin","slug":"blog-author","avatar":"/img/avatar/OIP-C.jpg","link":"/","description":"我真的是ikun","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"软件架构复习大纲","uid":"088ebac38bba3124d962899c15781d5f","slug":"4-软件架构复习","date":"2023-05-07T13:05:25.000Z","updated":"2023-05-08T11:57:03.026Z","comments":true,"path":"api/articles/4-软件架构复习.json","keywords":null,"cover":null,"text":" 软件架构复习 软件体系结构概论 软件危机 构件与软件重用 构件模型及实现 构件获取 构件管理 构件描述 构件分类与组织 构件重用 软件体系结构的兴起与发展 软件体系结构的定义 软件体系结构的应用现状 软件体系结构建模 建模的种类 结构模型 框架模型 动态模型 过程模型 功能模型...","link":"","photos":[],"count_time":{"symbolsCount":784,"symbolsTime":"1 mins."},"categories":[{"name":"软件架构","slug":"软件架构","count":1,"path":"api/categories/软件架构.json"}],"tags":[{"name":"软件架构","slug":"软件架构","count":2,"path":"api/tags/软件架构.json"}],"author":{"name":"Kevin","slug":"blog-author","avatar":"/img/avatar/OIP-C.jpg","link":"/","description":"我真的是ikun","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}